# Function calls

a {
  color: rgba(0, 255, 0, 0.5);
}

==>

RuleSet(TagName, Block(Declaration(PropertyName, CallExpression(Callee, ArgList(NumberLiteral, NumberLiteral, NumberLiteral, NumberLiteral)))))

# Calls where each argument has multiple values

div {
  background: repeating-linear-gradient(red, orange 50px);
  clip-path: polygon(50% 0%, 60% 40%, 100% 50%, 60% 60%, 50% 100%, 40% 60%, 0% 50%, 40% 40%)
}

==>

RuleSet(TagName, Block(
  Declaration(PropertyName, CallExpression(Callee, ArgList(Value, Value, NumberLiteral(Unit)))),
  Declaration(PropertyName, CallExpression(Callee, ArgList(
    NumberLiteral(Unit), NumberLiteral(Unit), NumberLiteral(Unit), NumberLiteral(Unit), NumberLiteral(Unit),
    NumberLiteral(Unit), NumberLiteral(Unit), NumberLiteral(Unit), NumberLiteral(Unit), NumberLiteral(Unit),
    NumberLiteral(Unit), NumberLiteral(Unit), NumberLiteral(Unit), NumberLiteral(Unit), NumberLiteral(Unit), NumberLiteral(Unit))))))

# Color literals

a {
  b: #fafd04;
  c: #fafd0401;
}

==>

RuleSet(TagName, Block(
  Declaration(PropertyName, ColorLiteral),
  Declaration(PropertyName, ColorLiteral)))

# Numbers

a {
  b: 0.5%;
  c: 5em;
  margin: 10E3px;
  margin: -456.8px;
  margin: -0.0px;
}

==>

RuleSet(TagName, Block(
  Declaration(PropertyName, NumberLiteral(Unit)),
  Declaration(PropertyName, NumberLiteral(Unit)),
  Declaration(PropertyName, NumberLiteral(Unit)),
  Declaration(PropertyName, NumberLiteral(Unit)),
  Declaration(PropertyName, NumberLiteral(Unit))))

# Binary arithmetic operators

a {
  width: calc(100% - 80px);
  aspect-ratio: 1/2;
  font-size: calc(10px + (56 - 10) * ((100vw - 320px) / (1920 - 320)));
}

==>

RuleSet(TagName, Block(
  Declaration(PropertyName, CallExpression(Callee, ArgList(BinaryExpression(NumberLiteral(Unit), Operator, NumberLiteral(Unit))))),
  Declaration(PropertyName, BinaryExpression(NumberLiteral, Operator, NumberLiteral)),
  Declaration(PropertyName, CallExpression(Callee, ArgList(
    BinaryExpression(BinaryExpression(NumberLiteral(Unit), Operator,
      ParenthesizedValue(BinaryExpression(NumberLiteral, Operator, NumberLiteral))), Operator,
      ParenthesizedValue(BinaryExpression(ParenthesizedValue(BinaryExpression(NumberLiteral(Unit), Operator, NumberLiteral(Unit))),
        Operator, ParenthesizedValue(BinaryExpression(NumberLiteral, Operator, NumberLiteral))))))))))

# Strings

a {
  b: '';
  c: '\'hi\'';
}

==>

RuleSet(TagName, Block(
  Declaration(PropertyName, StringLiteral),
  Declaration(PropertyName, StringLiteral)))

# URLs

a {
  b: url(http://something-else?foo=bar);
}

==>

RuleSet(TagName, Block(
  Declaration(PropertyName, CallLiteral(Callee, ParenthesizedContent))))

# Important declarations

a {
  b: c !important;
}

==>

RuleSet(TagName, Block(
  Declaration(PropertyName, Value, Important)))

# Comments right after numbers

a {
	shape-outside: circle(20em/*=*/at 50% 50%);
	shape-outside: inset(1em, 1em, 1em, 1em);
}

==>

RuleSet(TagName, Block(
  Declaration(PropertyName, CallExpression(Callee, ArgList(NumberLiteral(Unit), Comment, Value, NumberLiteral(Unit), NumberLiteral(Unit)))),
  Declaration(PropertyName, CallExpression(Callee, ArgList(NumberLiteral(Unit), NumberLiteral(Unit), NumberLiteral(Unit), NumberLiteral(Unit))))))

